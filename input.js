// input.js - –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è HTML

// –ò–º–ø–æ—Ä—Ç –∏–∑ main.js
import { 
    gameState, raceSelection, findEnemyBtn, attackBtn, battleLog, monsterImage,
    Elf, Human, Skyzer, Goblin, Orc, DarkMage 
} from './main.js';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥
export function addToLog(message, className = 'system-log') {
    const logEntry = document.createElement('div');
    logEntry.classList.add('log-entry', className);
    logEntry.textContent = message;
    battleLog.appendChild(logEntry);
    battleLog.scrollTop = battleLog.scrollHeight;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
export function updatePlayerStats() {
    document.getElementById('charLevel').textContent = gameState.player.level;
    document.getElementById('charExp').textContent = gameState.player.exp;
    document.getElementById('charExpNeeded').textContent = gameState.player.expForLevel;
    document.getElementById('charHp').textContent = gameState.player.hp;
    document.getElementById('charMaxHp').textContent = gameState.player.maxHp;
    document.getElementById('charMp').textContent = gameState.player.mp;
    document.getElementById('charMaxMp').textContent = gameState.player.maxMp;
    document.getElementById('charDmg').textContent = gameState.player.dmg;
    document.getElementById('charRace').textContent = gameState.player.race;
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª–æ—Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    document.getElementById('charHpBar').style.width = `${(gameState.player.hp / gameState.player.maxHp) * 100}%`;
    document.getElementById('charMpBar').style.width = `${(gameState.player.mp / gameState.player.maxMp) * 100}%`;
    document.getElementById('charExpBar').style.width = `${(gameState.player.exp / gameState.player.expForLevel) * 100}%`;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–æ–Ω—Å—Ç—Ä–∞
export function updateMonsterStats() {
    if (!gameState.currentMonster) return;
    
    document.getElementById('monsterType').textContent = gameState.currentMonster.type;
    document.getElementById('monsterHp').textContent = gameState.currentMonster.hp;
    document.getElementById('monsterMaxHp').textContent = gameState.currentMonster.maxHp;
    document.getElementById('monsterMp').textContent = gameState.currentMonster.mp;
    document.getElementById('monsterMaxMp').textContent = gameState.currentMonster.maxMp;
    document.getElementById('monsterDmg').textContent = gameState.currentMonster.dmg;
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª–æ—Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    document.getElementById('monsterHpBar').style.width = `${(gameState.currentMonster.hp / gameState.currentMonster.maxHp) * 100}%`;
    document.getElementById('monsterMpBar').style.width = `${(gameState.currentMonster.mp / gameState.currentMonster.maxMp) * 100}%`;
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–æ–Ω—Å—Ç—Ä–∞
    if (gameState.currentMonster.type === '–ì–æ–±–ª–∏–Ω') {
        monsterImage.textContent = 'üë∫';
    } else if (gameState.currentMonster.type === '–û—Ä–∫') {
        monsterImage.textContent = 'üëπ';
    } else if (gameState.currentMonster.type === '–¢—ë–º–Ω—ã–π –º–∞–≥') {
        monsterImage.textContent = 'üßô‚Äç‚ôÇÔ∏è';
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤—Ä–∞–≥–∞
export function findEnemy() {
    const monsters = [Goblin, Orc, DarkMage];
    const MonsterClass = monsters[Math.floor(Math.random() * monsters.length)];
    gameState.currentMonster = new MonsterClass();
    
    updateMonsterStats();
    attackBtn.disabled = false;
    
    addToLog(`–í—ã –≤—Å—Ç—Ä–µ—Ç–∏–ª–∏ ${gameState.currentMonster.type}!`, 'system-log');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞—Ç–∞–∫–∏
export function attack() {
    if (!gameState.currentMonster) return;
    
    // –ê—Ç–∞–∫–∞ –∏–≥—Ä–æ–∫–∞
    gameState.player.attack(gameState.currentMonster);
    addToLog(`–í—ã –∞—Ç–∞–∫—É–µ—Ç–µ –∏ –Ω–∞–Ω–æ—Å–∏—Ç–µ ${gameState.player.dmg} —É—Ä–æ–Ω–∞!`, 'player-log');
    updateMonsterStats();
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–±–µ–¥—É
    if (gameState.currentMonster.hp <= 0) {
        addToLog(`–í—ã –ø–æ–±–µ–¥–∏–ª–∏ ${gameState.currentMonster.type} –∏ –ø–æ–ª—É—á–∏–ª–∏ ${gameState.currentMonster.xpDrop} –æ–ø—ã—Ç–∞!`, 'system-log');
        gameState.player.gainExp(gameState.currentMonster.xpDrop);
        updatePlayerStats();
        gameState.currentMonster = null;
        attackBtn.disabled = true;
        return;
    }
    
    // –ê—Ç–∞–∫–∞ –º–æ–Ω—Å—Ç—Ä–∞
    setTimeout(() => {
        let attackMessage;
        if (gameState.currentMonster.type === '–¢—ë–º–Ω—ã–π –º–∞–≥') {
            attackMessage = gameState.currentMonster.attack(gameState.player);
        } else {
            gameState.currentMonster.attack(gameState.player);
            attackMessage = `${gameState.currentMonster.type} –∞—Ç–∞–∫—É–µ—Ç –∏ –Ω–∞–Ω–æ—Å–∏—Ç ${gameState.currentMonster.dmg} —É—Ä–æ–Ω–∞!`;
        }
        
        addToLog(attackMessage, 'enemy-log');
        updatePlayerStats();
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ—Ä–∞–∂–µ–Ω–∏–µ
        if (gameState.player.hp <= 0) {
            addToLog('–í—ã –ø–æ—Ç–µ—Ä–ø–µ–ª–∏ –ø–æ—Ä–∞–∂–µ–Ω–∏–µ! –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞.', 'system-log');
            attackBtn.disabled = true;
            findEnemyBtn.disabled = true;
        }
    }, 500);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
export function initEventHandlers() {
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–∞—Å—ã
    raceSelection.querySelectorAll('.race-btn').forEach(btn => {
        btn.addEventListener('click', (e) => {
            const race = e.target.dataset.race;
            
            if (race === 'elf') {
                gameState.player = new Elf();
            } else if (race === 'human') {
                gameState.player = new Human();
            } else if (race === 'skyzer') {
                gameState.player = new Skyzer();
            }
            
            updatePlayerStats();
            findEnemyBtn.disabled = false;
            raceSelection.style.display = 'none';
            
            addToLog(`–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–∞—Å—É: ${gameState.player.race}! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –≤—Ä–∞–≥–∞.`, 'system-log');
        });
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π
    findEnemyBtn.addEventListener('click', findEnemy);
    attackBtn.addEventListener('click', attack);
}